package mainpackage;

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

import interfacepackage.*;


public abstract class ConsoleUI implements CourseUIInterface
{
   public ConsoleUI(){}
   abstract public void ShowScreen();
   abstract public void contentBuilder();
   
   public void header()
   {
	   System.out.println("\n############################");
   }
   
   public void className(String course)
   {
	   System.out.println(course);
   }
   
   public void closeHeader()
   {
	   System.out.println("############################");

   }
   
   public void separator() 
   {
	   System.out.println("----------------------------");

   }
   
   public void footer() 
   {
	    

   }
   
   
   public static void clearConsole() {
       //Clears Screen in java
       try {
           if (System.getProperty("os.name").contains("Windows")) {
               new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
           } else {
               Runtime.getRuntime().exec("clear");
           }
       } catch (IOException | InterruptedException ex) {
       }
   }
   

   public static String Padding(String s, int colWidth, String paddingType) {
       int lenght = s.trim().length();
       int totFreeSpace = colWidth - lenght;        

       
       if (paddingType == "center") {
           int left = (totFreeSpace / 2) + lenght + 1;
           String s1 = String.format("%1$-" + left + "s", s);
           String s2 = String.format("%1$" + colWidth + "s", s1);
           return s2;
       } else if (paddingType == "rightcenter") {
           int left = (colWidth / 2) + 1;
           String s1 = String.format("%1$" + left + "s", s);
           String s2 = String.format("%1$-" + colWidth + "s", s1);
           return s2;
       } else if (paddingType == "leftcenter") {
           int left = (colWidth / 2) + 2;
           String s1 = String.format("%1$-" + left + "s", s);
           String s2 = String.format("%1$" + colWidth + "s", s1);
           return s2;
       } else if (paddingType == "right") {
           String s2 = String.format("%1$" + colWidth + "s", s);
           return s2;
       } else if (paddingType == "left") {
           int left = colWidth / 2;
           String s1 = String.format("%1$-" + colWidth + "s", s);
           String s2 = String.format("%1$" + left + "s", s1);
           return s2;
       } else {
           String e = "Error:!?";
           int left = (totFreeSpace / 2) + lenght + 1;
           String s1 = String.format("%1$-" + left + "s", e);
           String s2 = String.format("%1$" + colWidth + "s", s1);
           return s2;
       }

   }
   
   
}


class LogInScreen extends ConsoleUI
{
	public LogInScreen(){}
	
	public void ShowScreen()
	{
		ConsoleUI.clearConsole();
		super.header();
		super.className("Screen 1: ");
		super.closeHeader();
		this.contentBuilder();
		super.separator();
		
		
	}
	
	@Override
	public void header(){
		  
	}
	
	@Override
	public void separator(){
	 
	}
	
	@Override
	public void closeHeader(){
		
 	}
	
	@Override
	public void footer(){
		
	}
	
	public void contentBuilder() {
		System.out.println("\n\n\ncreate content here\n\n\n");
	}
}


class  RegistrationStatusScreen extends ConsoleUI
{
	public RegistrationStatusScreen(){}
		
	public void ShowScreen()
	{
		ConsoleUI.clearConsole();
		super.header();
		super.className("Screen 2: ");
		super.closeHeader();
		this.contentBuilder();
		super.separator();
		
		
	}
	
	@Override
	public void header(){
	 
	}
	
	@Override
	public void separator(){
	 
	}
	
	@Override
	public void closeHeader(){
	 
	}
	
	@Override
	public void footer(){
		
	}
	
	public void contentBuilder() {
		
		System.out.println("After registration was succesful. Send a message.");

		System.out.println("\n\n\ncreate content here\n\n\n");
	}

}


class StudentProfileScreen extends ConsoleUI
{
	public StudentProfileScreen(){}
		
	public void ShowScreen()
	{
		ConsoleUI.clearConsole();
		super.header();
		super.className("Screen 3: ");
		super.closeHeader();
		this.contentBuilder();
		super.separator();
		
		
	}
	
	@Override
	public void header(){
		  System.out.println(" ____________________________________________________________________________________________________________________");
	      System.out.println("|             field1            |   field2       |    field3      |    field4      |      field3    |   field N      |");
	      System.out.println("|_______________________________|________________|________________|________________|________________|________________|");

	}
	
	@Override
	public void separator(){
	 
	}
	
	@Override
	public void closeHeader(){
		 
	}
	
	@Override
	public void footer(){
		 System.out.println("|_______________________________|________________|________________|________________|________________|________________|");
	}
	
	
	
	
	public void contentBuilder() {
		System.out.println("Class Registration List");
		private ArrayList<Course> courseList = new ArrayList<Course>();
		
		CourseHandlerData(){
			CourseListFileData courseData = new CourseListFileData();
			
			int count = super.GetCourseCount();
			
			for(int i = 0; i < count; i++){
				Course course = new Course();
				courseData.GetCourse(i, course);
				this.courseList.add(course);
				course = null;
			}
		}
		
		void printAllCourses(){
			RegistrationHandlerData  registration = new RegistrationHandlerData();
			Collections.sort(courseList, new SortCourseList());
			for(Course c: courseList){
				System.out.println("|" + ConsoleUI.Padding(c.GetCourseID(), 15, "center") +
									"|" + ConsoleUI.Padding(c.GetCourseName(), 30, "center") +
									"|" + ConsoleUI.Padding(c.GetClassDate(), 40, "center") +
									"|" + ConsoleUI.Padding(c.GetClassTime(), 20, "center") +
									"|" + ConsoleUI.Padding(c.GetClassFee(), 7, "center") +
									"|" + ConsoleUI.Padding(String.valueOf(registration.getCountOfStudentByClass(c.GetCourseID())), 4, "center") +
									"|" + ConsoleUI.Padding(registration.getCourseMax(c.GetCourseID()), 4, "center") +   
									"|");
									 
					 
			}
		}
		
		ArrayList<ArrayList> getCourseListEnhanced(){
			RegistrationHandlerData  registration = new RegistrationHandlerData();
			ArrayList<ArrayList> store = new ArrayList<ArrayList>();
			Collections.sort(this.courseList, new SortCourseList());
			for(Course course: this.courseList){
				ArrayList<String> temp = new ArrayList<String>();
				 temp.add(course.GetCourseID());
				 temp.add(course.GetCourseName());
				 temp.add(course.GetClassDate());
				 temp.add(course.GetClassTime());
				 temp.add(course.GetClassFee());
				 temp.add(course.GetCourseDescription());
				 temp.add(course.GetDays());	
				 temp.add(course.GetInstructorName());
				 temp.add(course.GetRegistratrionNum());
				 temp.add(String.valueOf(registration.getCountOfStudentByClass(course.GetCourseID())));
				 temp.add(registration.getCourseMax(course.GetCourseID()));
				 
				 store.add(temp);
				 
			}
			
			return store;
		}
		
		ArrayList<Course> getCourseList(){
			return this.courseList;
		}
	}

}



class AvailableCourseScreen extends ConsoleUI
{
	public AvailableCourseScreen(){}
		
	public void ShowScreen()
	{
		ConsoleUI.clearConsole();
		super.header();
		super.className("Screen 3: ");
		super.closeHeader();
		this.contentBuilder();
		super.separator();
		
		
	}
	
	@Override
	public void header(){
	 
	}
	
	@Override
	public void separator(){
	 
	}
	
	@Override
	public void closeHeader(){
	 
	}
	
	@Override
	public void footer(){
		
	}
	public void contentBuilder() {
	    private java.io.File file;
		private int coursecount;
		   
		CourseListFileData()
		{
		   // open file if it exists, if not create it
		   file = new java.io.File("courselistdata.txt");
		   if (!file.exists())
		   {		  
			  try
			  {
				 PrintWriter writer = new PrintWriter("courselistdata.txt", "UTF-8");
				 // initialize empty file with count data
				 writer.println("0");
				 writer.close();
			  } 
			  catch (IOException e) 
			  {
				 // do something
				 System.out.println("courselistdata.txt file open failed");
				 return;
			  }	     
		   }
			  
		   GetCourseCount();
		}
		
		public int GetCourseCount()
		{
		   try
		   {
			  Scanner input = new Scanner(file);
			  coursecount = Integer.parseInt(input.next());
			  input.close();
		   }
		   catch (IOException e) 
		   {
			  System.out.println("courselistdata.txt file scanner failed");
			  return -1;
		   }
		   
		   return coursecount;	
		}
		
		public boolean GetCourse(int index, Course course)
		{
		   int count;
		   boolean done1;
		   String teststr;
			  
		   try
		   {
			  Scanner input = new Scanner(file);
			  input.useDelimiter("\r\n");
			  
			  input.next();  // skip course count
			  input.next();  // skip empty line
			  
			  // move to indexed class info section
			  for ( count = 0; count < index; count++ )
			  {	 
				 done1 = false;
				 while (done1 == false)
				 {
					teststr = input.next();
					if (teststr.equals("end") == true)
					   done1 = true;	   
				 }
				 input.next(); // skip over empty line
			  }
				 
			  //  access all course data from text file and copy to Course object 
			  // get file data for course name
			  course.SetCourseName(input.next());
	          course.SetCourseID(input.next());
	          course.SetCourseRegNum(input.next());
	          course.SetInstructorName(input.next());
	          course.SetCourseDescription(input.next());
	          course.SetCourseDate(input.next());
	          course.SetDays(input.next());
	          course.SetClassTime(input.next());
	          course.SetClassFee(input.next());
			     	     
			  input.close();
		   }
		   catch (IOException e) 
		   {
			  System.out.println("courselistdata.txt file scanner failed");
			  return false;
		   }
		 		
		   return true;	
		}
		  
		 
		   
	}

}




class GoodByeScren extends ConsoleUI
{
	public GoodByeScren(){}
	
	public void ShowScreen()
	{
		ConsoleUI.clearConsole();
		super.header();
		super.className("Screen 1: ");
		super.closeHeader();
		this.contentBuilder();
		super.separator();
		
		
	}
	
	@Override
	public void header(){
	 
	}
	
	@Override
	public void separator(){
	 
	}
	
	@Override
	public void closeHeader(){
	 
	}
	
	@Override
	public void footer(){
		
	}
	
	public void contentBuilder() {
		System.out.println("List available courses to register for");

		System.out.println("\n\n\ncreate content here\n\n\n");
	}
}
